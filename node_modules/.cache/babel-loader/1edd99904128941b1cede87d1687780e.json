{"ast":null,"code":"var _jsxFileName = \"C:\\\\Datos\\\\Diana\\\\node-projects\\\\images-upload-resizer-redux\\\\src\\\\components\\\\ImagesList.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { getImages, showResultResizeProcess } from \"../actions/images\";\nimport { updateUploadProgress, endUploadProccess } from \"../actions/upload\";\nimport UploadService from \"../services/fileUpload\";\nimport ResizeImageService from \"../services/resizeImage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ImagesList extends React.Component {\n  constructor(props) {\n    super(props); //tamaño de hoja A4 (796 x 1123 pixeles)\n\n    this.widthA4 = 796; //horizontal\n\n    this.heightA4 = 1123; //vertical\n  } //metodo que se llama una vez se ha cargado el componente para hacer el request y \n  //traer la lista de imagenes disponibles en el servidor\n\n\n  componentDidMount() {\n    this.getImagesL();\n  }\n\n  getImagesL() {\n    UploadService.getFiles().then(response => {\n      //lanzamos la accion que actualizara el estado\n      this.props.getImagesList(response.data);\n    }).catch(() => {\n      //si el servicio no esta disponible y da error retornamos null para ignorar esta acción\n      return null;\n    });\n  }\n\n  uploadImages() {\n    let selectedFiles = this.props.selectedImages;\n\n    for (let i = 0; i < selectedFiles.length; i++) {\n      this.upload(i, selectedFiles[i]);\n    }\n  } //metodo que haciendo uso de la librería de Axios \n  //lanza la petición web al API que se encarga de subir los archivos \n  //al directorio local del servidor\n\n\n  upload(idx, file) {\n    let _progressBar = [...this.props.progressBar];\n    UploadService.upload(file, event => {\n      _progressBar[idx].percentage = Math.round(100 * event.loaded / event.total); //console.log(\"entra request\")\n\n      this.props.updateUploadProgressImg(_progressBar);\n    }).then(() => {\n      //console.log(\"entra then\")\n      let nextMessage = \"Imagen(es) cargada(s) exitosamente\";\n      this.props.endUploadProccessImg(nextMessage);\n      this.getImagesL();\n    }).catch(() => {\n      _progressBar[idx].percentage = 0;\n      let nextMessage = \"No se pudo cargar la imagen: \" + file.name + \". \";\n      this.props.endUploadProccessImg(nextMessage);\n    });\n  } //metodo que implementa el algoritmo de redimension de la imagen\n\n\n  resizeItem(width, heigth) {\n    let res = ResizeImageService.resize(this.widthA4, this.heightA4, width, heigth);\n    let msg = res[0];\n    let newWidth = res[2];\n    let newHeight = res[3];\n    let orientation = ResizeImageService.orientation(newWidth, newHeight); // actualizamos valor de estado del mensaje de alerta para que se renderice el DOM \n\n    this.props.showResultResize(msg, orientation);\n  }\n\n  render() {\n    //se activa el procesamiento de imagenes para la carga\n    if (this.props.procesarImagenes && this.props.procesarImagenes === \"S\") {\n      console.log(\"entra if this.props.procesarImagenes=\" + this.props.procesarImagenes);\n      this.uploadImages();\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.props.showAlertMessage ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-danger\",\n        role: \"alert\",\n        children: this.props.alertMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 48\n      }, this) : null, this.props.showResultMessage ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-success\",\n        role: \"alert\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.props.resultMessageSize\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.props.resultMessageOrientation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }, this) : null, this.props.imagesList && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card mt-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-header\",\n          children: \"Lista de Imagenes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"list-group list-group-flush\",\n          children: this.props.imagesList.map((img, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"list-group-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                href: img.url,\n                target: \"_blank\",\n                rel: \"noreferrer\",\n                children: [\"Ver \", img.name]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 36\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Tamaño original (ancho x alto):\" + img.width + \"px X \" + img.height + \"px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: img.url,\n              alt: img.name,\n              height: \"100px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"content-detail-info\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-info btn-sm\",\n                onClick: () => this.resizeItem(img.width, img.height),\n                children: \"Redimensionar\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 33\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    alertMessage: state.uploadImage.alertMessage,\n    showAlertMessage: state.uploadImage.showAlertMessage,\n    showResultMessage: state.uploadImage.showResultMessage,\n    resultMessageSize: state.uploadImage.resultMessageSize,\n    resultMessageOrientation: state.uploadImage.resultMessageOrientation,\n    imagesList: state.uploadImage.imagesList,\n    selectedImages: state.uploadImage.selectedImages,\n    procesarImagenes: state.uploadImage.procesarImagenes,\n    progressBar: state.uploadImage.progressBar\n  };\n};\n\nconst mapDispatchToProps = (dispatch, props) => {\n  return {\n    getImagesList: data => dispatch(getImages(data)),\n    updateUploadProgressImg: progress => dispatch(updateUploadProgress(progress)),\n    endUploadProccessImg: msg => dispatch(endUploadProccess(msg)),\n    showResultResize: (msg, orientation) => dispatch(showResultResizeProcess(msg, orientation))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ImagesList);","map":{"version":3,"sources":["C:/Datos/Diana/node-projects/images-upload-resizer-redux/src/components/ImagesList.js"],"names":["React","connect","getImages","showResultResizeProcess","updateUploadProgress","endUploadProccess","UploadService","ResizeImageService","ImagesList","Component","constructor","props","widthA4","heightA4","componentDidMount","getImagesL","getFiles","then","response","getImagesList","data","catch","uploadImages","selectedFiles","selectedImages","i","length","upload","idx","file","_progressBar","progressBar","event","percentage","Math","round","loaded","total","updateUploadProgressImg","nextMessage","endUploadProccessImg","name","resizeItem","width","heigth","res","resize","msg","newWidth","newHeight","orientation","showResultResize","render","procesarImagenes","console","log","showAlertMessage","alertMessage","showResultMessage","resultMessageSize","resultMessageOrientation","imagesList","map","img","index","url","height","mapStateToProps","state","uploadImage","mapDispatchToProps","dispatch","progress"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {getImages, showResultResizeProcess} from \"../actions/images\"\r\nimport {updateUploadProgress, endUploadProccess} from \"../actions/upload\"\r\nimport UploadService from \"../services/fileUpload\";\r\nimport ResizeImageService from \"../services/resizeImage\";\r\n\r\nclass ImagesList extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n                \r\n        //tamaño de hoja A4 (796 x 1123 pixeles)\r\n        this.widthA4 = 796; //horizontal\r\n        this.heightA4 = 1123; //vertical\r\n\r\n    }\r\n\r\n    //metodo que se llama una vez se ha cargado el componente para hacer el request y \r\n    //traer la lista de imagenes disponibles en el servidor\r\n    componentDidMount() {\r\n        this.getImagesL()\r\n    }\r\n\r\n    getImagesL(){\r\n        UploadService.getFiles()\r\n        .then((response) => {\r\n            //lanzamos la accion que actualizara el estado\r\n            this.props.getImagesList(response.data)\r\n        \r\n        })\r\n        .catch(() => {\r\n            //si el servicio no esta disponible y da error retornamos null para ignorar esta acción\r\n            return null;\r\n        });\r\n    }\r\n\r\n    uploadImages(){\r\n        \r\n        let selectedFiles = this.props.selectedImages\r\n        for (let i = 0; i < selectedFiles.length; i++) {\r\n            this.upload(i, selectedFiles[i]);\r\n        }\r\n    }\r\n\r\n    //metodo que haciendo uso de la librería de Axios \r\n    //lanza la petición web al API que se encarga de subir los archivos \r\n    //al directorio local del servidor\r\n    upload(idx, file) {\r\n \r\n        let _progressBar = [...this.props.progressBar];\r\n    \r\n        UploadService.upload(file, (event) => {\r\n          _progressBar[idx].percentage = Math.round((100 * event.loaded) / event.total);\r\n          //console.log(\"entra request\")\r\n          this.props.updateUploadProgressImg(_progressBar)\r\n\r\n        })\r\n        .then(() => {\r\n            //console.log(\"entra then\")\r\n            let nextMessage = \"Imagen(es) cargada(s) exitosamente\";\r\n            this.props.endUploadProccessImg(nextMessage)\r\n        \r\n            this.getImagesL()\r\n            \r\n        })\r\n        .catch(() => {\r\n            _progressBar[idx].percentage = 0;\r\n            let nextMessage = \"No se pudo cargar la imagen: \" + file.name+\". \";\r\n            this.props.endUploadProccessImg(nextMessage)\r\n        });\r\n        \r\n    }\r\n\r\n    //metodo que implementa el algoritmo de redimension de la imagen\r\n    resizeItem (width, heigth) { \r\n\r\n        let res = ResizeImageService.resize(this.widthA4,this.heightA4,width,heigth)\r\n        let msg = res[0];\r\n\r\n        let newWidth = res[2];\r\n        let newHeight = res[3];\r\n\r\n        let orientation = ResizeImageService.orientation(newWidth,newHeight)\r\n        \r\n        // actualizamos valor de estado del mensaje de alerta para que se renderice el DOM \r\n        this.props.showResultResize(msg,orientation)\r\n\r\n    }\r\n    render (){\r\n\r\n        //se activa el procesamiento de imagenes para la carga\r\n        if(this.props.procesarImagenes && this.props.procesarImagenes === \"S\"){\r\n            console.log(\"entra if this.props.procesarImagenes=\"+this.props.procesarImagenes)\r\n            this.uploadImages()\r\n        } \r\n\r\n        return (\r\n            <div>\r\n                {this.props.showAlertMessage ? <div className=\"alert alert-danger\" role=\"alert\">{this.props.alertMessage}</div> : null}\r\n\r\n                {this.props.showResultMessage ?  \r\n\r\n                    <div className=\"alert alert-success\" role=\"alert\">\r\n                        <p>{this.props.resultMessageSize}</p>\r\n                        <p>{this.props.resultMessageOrientation}</p>\r\n                    </div> : null\r\n                }\r\n\r\n                { this.props.imagesList &&(\r\n                <div className=\"card mt-3\">\r\n                    <div className=\"card-header\">Lista de Imagenes</div>\r\n                    <ul className=\"list-group list-group-flush\">\r\n                    \r\n                            {this.props.imagesList.map((img, index) => (\r\n                        \r\n                                <li className=\"list-group-item\" key={index}>\r\n                                <p><a href={img.url} target=\"_blank\" rel=\"noreferrer\">Ver {img.name}</a></p>\r\n                                <p>{\"Tamaño original (ancho x alto):\"+img.width+\"px X \"+img.height+\"px\"}</p>\r\n                                <img src={img.url} alt={img.name} height=\"100px\"  />\r\n                                <div className=\"content-detail-info\"> \r\n                                    <button className=\"btn btn-info btn-sm\"\r\n                                    onClick={()=>this.resizeItem(img.width, img.height)}>Redimensionar</button> \r\n                                    </div> \r\n                                \r\n                                </li>\r\n                            ))}\r\n                        \r\n            \r\n                    </ul>\r\n                </div>\r\n                )}\r\n\r\n            </div>\r\n        )\r\n    }   \r\n    \r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        alertMessage: state.uploadImage.alertMessage,\r\n        showAlertMessage: state.uploadImage.showAlertMessage,\r\n        showResultMessage: state.uploadImage.showResultMessage,\r\n        resultMessageSize: state.uploadImage.resultMessageSize,\r\n        resultMessageOrientation: state.uploadImage.resultMessageOrientation,\r\n        imagesList: state.uploadImage.imagesList,\r\n        selectedImages: state.uploadImage.selectedImages,\r\n        procesarImagenes: state.uploadImage.procesarImagenes,\r\n        progressBar: state.uploadImage.progressBar\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n\r\n    return {\r\n        getImagesList: (data) => dispatch(getImages(data)),\r\n        updateUploadProgressImg: (progress) => dispatch(updateUploadProgress(progress)),\r\n        endUploadProccessImg: (msg) => dispatch(endUploadProccess(msg)),\r\n        showResultResize: (msg,orientation) => dispatch(showResultResizeProcess(msg,orientation))\r\n    }\r\n    \r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(ImagesList);"]},"metadata":{},"sourceType":"module"}