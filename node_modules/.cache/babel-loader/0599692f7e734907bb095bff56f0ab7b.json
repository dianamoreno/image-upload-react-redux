{"ast":null,"code":"var _jsxFileName = \"C:\\\\Datos\\\\Diana\\\\node-projects\\\\images-upload-resizer-redux\\\\src\\\\components\\\\ImagesList.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport UploadService from \"../services/fileUpload\";\nimport ResizeImageService from \"../services/resizeImage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ImagesList extends React.Component {\n  constructor(props) {\n    super(props); //seteamos el estado inicial \n\n    this.imageTypeValidation = () => {\n      let files = this.selectedImages;\n\n      for (let file of files) {\n        if (file.type.toLowerCase() !== this.imageTypeAccepted) return false;\n      }\n\n      return true;\n    };\n\n    this.state = {\n      showAlertMessage: false,\n      alertMessage: \"\",\n      showResultMessage: false,\n      resultMessageSize: \"\",\n      resultMessageOrientation: \"\",\n      selectedFiles: 0,\n      progressBar: [],\n      imagesList: [],\n      selectedImages: []\n    }; //tamaño de hoja A4 (796 x 1123 pixeles)\n\n    this.widthA4 = 796; //horizontal\n\n    this.heightA4 = 1123; //vertical\n\n    this.imageTypeAccepted = \"image/jpeg\";\n    this.selectedImages = [];\n  } //metodo que evalua si todos las imagenes seleccionadas son de tipo JPG\n\n\n  //se lanza el action de UPLOAD_IMAGES\n\n  /*handleUploadImages = () => {\r\n        const selectedFiles = this.selectedImages\r\n      if(selectedFiles.length > 0){\r\n            if( this.imageTypeValidation() ){\r\n              // actualizamos valor de estado del mensaje de alerta para que se renderice el DOM \r\n              this.setState((state) => { \r\n                  return {\r\n                      showAlertMessage: false,\r\n                      alertMessage: \"\"\r\n                  }\r\n              }) \r\n                let _progressBar = [];\r\n              for (let selectedFile of selectedFiles) {\r\n                  _progressBar.push({ percentage: 0, fileName: selectedFile.name });\r\n              }\r\n                this.setState(\r\n              {\r\n                  progressBar: _progressBar,\r\n              },\r\n              () => {\r\n                  for (let i = 0; i < selectedFiles.length; i++) {\r\n                  this.upload(i, selectedFiles[i]);\r\n                  }\r\n              });\r\n          } else {\r\n              this.setState((state) => { \r\n                  return {\r\n                      showAlertMessage: true,\r\n                      alertMessage: \"Solo se permiten imagenes tipo \"+this.imageTypeAccepted,\r\n                      showResultMessage: false                    \r\n                  }\r\n              }) \r\n          }\r\n        } else {\r\n            this.setState((state) => { \r\n              return {\r\n                  showAlertMessage: true,\r\n                  alertMessage: \"No ha seleccionado ningún archivo aún!\",\r\n                  showResultMessage: false                    \r\n              }\r\n          }) \r\n      }\r\n  }\r\n  //metodo que haciendo uso del servicios de Axios \r\n  //lanza la petición web para al API que se encarga de subir los archivos \r\n  //al directorio local\r\n  upload(idx, file) {\r\n  \n      let _progressBar = [...this.state.progressBar];\r\n  \r\n      UploadService.upload(file, (event) => {\r\n        _progressBar[idx].percentage = Math.round((100 * event.loaded) / event.total);\r\n        this.setState({\r\n          progressBar: _progressBar,\r\n        });\r\n      })\r\n      .then(() => {\r\n          this.setState((prev) => {\r\n              let nextMessage = \"Imagenes cargadas exitosamente\"\r\n              return {\r\n                  showAlertMessage: true,\r\n                  alertMessage: nextMessage,\r\n                  selectedImages: []\r\n              };\r\n          });\r\n            return UploadService.getFiles()\r\n          .then((files) => {\r\n              this.setState({\r\n                  imagesList: files.data,\r\n              });\r\n          })\r\n      })\r\n      .catch(() => {\r\n      _progressBar[idx].percentage = 0;\r\n          this.setState((prev) => {\r\n              let nextMessage = prev.alertMessage+\"No se pudo cargar la imagen: \" + file.name+\". \";\r\n              return {\r\n                  progressBar: _progressBar,\r\n                  showAlertMessage: true,\r\n                  alertMessage: nextMessage,\r\n                  showResultMessage: false,\r\n              \r\n              };\r\n          });\r\n      });\r\n      \r\n  }\r\n    //se lanza el action de SELECT_FILES\r\n  handleChange(event) {\r\n      this.selectedImages = event.target.files;\r\n      console.log(this.selectedImages)\r\n      this.props.selectFiles(event)\r\n  }\r\n      //metodo que implementa el algoritmo de redimension de la imagen\r\n  resizeItem (width, heigth) { \r\n        let res = ResizeImageService.resize(this.widthA4,this.heightA4,width,heigth)\r\n      let msg = res[0];\r\n        let newWidth = res[2];\r\n      let newHeight = res[3];\r\n        let orientation = ResizeImageService.orientation(newWidth,newHeight)\r\n      \r\n      // actualizamos valor de estado del mensaje de alerta para que se renderice el DOM \r\n      this.setState((state) => { \r\n          return {\r\n              showAlertMessage: false,\r\n              showResultMessage: true,\r\n              resultMessageSize: msg,\r\n              resultMessageOrientation: orientation,\r\n              progressBar: []\r\n          }\r\n      })\r\n    }\r\n   \r\n  */\n  //metodo que renderiza mensaje en pantalla si el estado de showAlertMessage cambia\n  renderAlertMessage() {\n    return this.state.showAlertMessage ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-danger\",\n      role: \"alert\",\n      children: this.state.alertMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }, this) : null;\n  } //metodo que renderiza mensaje en pantalla si el estado de showResultMessage cambia\n\n\n  renderResultMessage() {\n    return this.state.showResultMessage ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-success\",\n      role: \"alert\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.state.resultMessageSize\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.state.resultMessageOrientation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }, this) : null;\n  } //metodo que se llama una vez se ha cargado el componente\n  //al setear el estado aqui, cada vez que se modifique se volvera a mostrar en el DOM\n\n\n  componentDidMount() {\n    UploadService.getFiles().then(response => {\n      this.setState({\n        imagesList: response.data\n      });\n    });\n  } //metodo que renderiza todo el contenido del componente en el DOM la primera vez que se carga la página\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.state.progressBar && this.state.progressBar.map((progressInfo, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: progressInfo.fileName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-bar progress-bar-info\",\n            role: \"progressbar\",\n            \"aria-valuenow\": progressInfo.percentage,\n            \"aria-valuemin\": \"0\",\n            \"aria-valuemax\": \"100\",\n            style: {\n              width: progressInfo.percentage + \"%\"\n            },\n            children: [progressInfo.percentage, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 21\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 21\n      }, this)), this.renderAlertMessage(), this.renderResultMessage(), this.state.imagesList && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card mt-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-header\",\n          children: \"Lista de Imagenes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"list-group list-group-flush\",\n          children: this.state.imagesList.map((img, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"list-group-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                href: img.url,\n                target: \"_blank\",\n                rel: \"noreferrer\",\n                children: [\"Ver \", img.name]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 36\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Tamaño original (ancho x alto):\" + img.width + \"px X \" + img.height + \"px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: img.url,\n              alt: img.name,\n              height: \"100px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"content-detail-info\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-info btn-sm\",\n                onClick: () => this.resizeItem(img.width, img.height),\n                children: \"Redimensionar\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 33\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    selectedFiles: state.selectedFiles\n  };\n};\n\nexport default connect(mapStateToProps, {})(ImagesList);","map":{"version":3,"sources":["C:/Datos/Diana/node-projects/images-upload-resizer-redux/src/components/ImagesList.js"],"names":["React","connect","UploadService","ResizeImageService","ImagesList","Component","constructor","props","imageTypeValidation","files","selectedImages","file","type","toLowerCase","imageTypeAccepted","state","showAlertMessage","alertMessage","showResultMessage","resultMessageSize","resultMessageOrientation","selectedFiles","progressBar","imagesList","widthA4","heightA4","renderAlertMessage","renderResultMessage","componentDidMount","getFiles","then","response","setState","data","render","map","progressInfo","index","fileName","percentage","width","img","url","name","height","resizeItem","mapStateToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport UploadService from \"../services/fileUpload\";\r\nimport ResizeImageService from \"../services/resizeImage\";\r\n\r\nclass ImagesList extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n               \r\n        //seteamos el estado inicial \r\n        this.state = {\r\n            showAlertMessage: false,\r\n            alertMessage: \"\",\r\n            showResultMessage: false,\r\n            resultMessageSize: \"\",\r\n            resultMessageOrientation: \"\",\r\n            selectedFiles: 0,\r\n            progressBar: [],\r\n            imagesList: [],\r\n            selectedImages: []\r\n        };\r\n        //tamaño de hoja A4 (796 x 1123 pixeles)\r\n        this.widthA4 = 796; //horizontal\r\n        this.heightA4 = 1123; //vertical\r\n        this.imageTypeAccepted = \"image/jpeg\";\r\n\r\n        this.selectedImages = [];\r\n\r\n    }\r\n\r\n    //metodo que evalua si todos las imagenes seleccionadas son de tipo JPG\r\n    imageTypeValidation = () => {\r\n\r\n        let files = this.selectedImages;\r\n\r\n        for (let file of files) {\r\n            if(file.type.toLowerCase() !== this.imageTypeAccepted)\r\n                return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n    //se lanza el action de UPLOAD_IMAGES\r\n    /*handleUploadImages = () => {\r\n\r\n        const selectedFiles = this.selectedImages\r\n        if(selectedFiles.length > 0){\r\n\r\n            if( this.imageTypeValidation() ){\r\n                // actualizamos valor de estado del mensaje de alerta para que se renderice el DOM \r\n                this.setState((state) => { \r\n                    return {\r\n                        showAlertMessage: false,\r\n                        alertMessage: \"\"\r\n                    }\r\n                }) \r\n\r\n                let _progressBar = [];\r\n                for (let selectedFile of selectedFiles) {\r\n                    _progressBar.push({ percentage: 0, fileName: selectedFile.name });\r\n                }\r\n\r\n                this.setState(\r\n                {\r\n                    progressBar: _progressBar,\r\n                },\r\n                () => {\r\n                    for (let i = 0; i < selectedFiles.length; i++) {\r\n                    this.upload(i, selectedFiles[i]);\r\n                    }\r\n                });\r\n            } else {\r\n                this.setState((state) => { \r\n                    return {\r\n                        showAlertMessage: true,\r\n                        alertMessage: \"Solo se permiten imagenes tipo \"+this.imageTypeAccepted,\r\n                        showResultMessage: false                    \r\n                    }\r\n                }) \r\n            }\r\n\r\n        } else {\r\n\r\n            this.setState((state) => { \r\n                return {\r\n                    showAlertMessage: true,\r\n                    alertMessage: \"No ha seleccionado ningún archivo aún!\",\r\n                    showResultMessage: false                    \r\n                }\r\n            }) \r\n        }\r\n    }\r\n    //metodo que haciendo uso del servicios de Axios \r\n    //lanza la petición web para al API que se encarga de subir los archivos \r\n    //al directorio local\r\n    upload(idx, file) {\r\n   \r\n        let _progressBar = [...this.state.progressBar];\r\n    \r\n        UploadService.upload(file, (event) => {\r\n          _progressBar[idx].percentage = Math.round((100 * event.loaded) / event.total);\r\n          this.setState({\r\n            progressBar: _progressBar,\r\n          });\r\n        })\r\n        .then(() => {\r\n            this.setState((prev) => {\r\n                let nextMessage = \"Imagenes cargadas exitosamente\"\r\n                return {\r\n                    showAlertMessage: true,\r\n                    alertMessage: nextMessage,\r\n                    selectedImages: []\r\n                };\r\n            });\r\n\r\n            return UploadService.getFiles()\r\n            .then((files) => {\r\n                this.setState({\r\n                    imagesList: files.data,\r\n                });\r\n            })\r\n        })\r\n        .catch(() => {\r\n        _progressBar[idx].percentage = 0;\r\n            this.setState((prev) => {\r\n                let nextMessage = prev.alertMessage+\"No se pudo cargar la imagen: \" + file.name+\". \";\r\n                return {\r\n                    progressBar: _progressBar,\r\n                    showAlertMessage: true,\r\n                    alertMessage: nextMessage,\r\n                    showResultMessage: false,\r\n                \r\n                };\r\n            });\r\n        });\r\n        \r\n    }\r\n\r\n    //se lanza el action de SELECT_FILES\r\n    handleChange(event) {\r\n        this.selectedImages = event.target.files;\r\n        console.log(this.selectedImages)\r\n        this.props.selectFiles(event)\r\n    }\r\n\r\n\r\n    //metodo que implementa el algoritmo de redimension de la imagen\r\n    resizeItem (width, heigth) { \r\n\r\n        let res = ResizeImageService.resize(this.widthA4,this.heightA4,width,heigth)\r\n        let msg = res[0];\r\n\r\n        let newWidth = res[2];\r\n        let newHeight = res[3];\r\n\r\n        let orientation = ResizeImageService.orientation(newWidth,newHeight)\r\n        \r\n        // actualizamos valor de estado del mensaje de alerta para que se renderice el DOM \r\n        this.setState((state) => { \r\n            return {\r\n                showAlertMessage: false,\r\n                showResultMessage: true,\r\n                resultMessageSize: msg,\r\n                resultMessageOrientation: orientation,\r\n                progressBar: []\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n   \r\n*/\r\n //metodo que renderiza mensaje en pantalla si el estado de showAlertMessage cambia\r\n    renderAlertMessage(){\r\n        return this.state.showAlertMessage ?  \r\n        <div className=\"alert alert-danger\" role=\"alert\">{this.state.alertMessage}</div> : null\r\n    }\r\n\r\n    //metodo que renderiza mensaje en pantalla si el estado de showResultMessage cambia\r\n    renderResultMessage(){\r\n        return this.state.showResultMessage ?  \r\n\r\n        <div className=\"alert alert-success\" role=\"alert\">\r\n            <p>{this.state.resultMessageSize}</p>\r\n            <p>{this.state.resultMessageOrientation}</p>\r\n        </div> : null\r\n    }\r\n    //metodo que se llama una vez se ha cargado el componente\r\n    //al setear el estado aqui, cada vez que se modifique se volvera a mostrar en el DOM\r\n    componentDidMount() {\r\n\r\n        UploadService.getFiles().then((response) => {\r\n            this.setState({\r\n                imagesList: response.data,\r\n            });\r\n        });\r\n    }\r\n\r\n\r\n    \r\n    //metodo que renderiza todo el contenido del componente en el DOM la primera vez que se carga la página\r\n    render() {\r\n        return (\r\n            <div>\r\n                \r\n                {this.state.progressBar &&\r\n                this.state.progressBar.map((progressInfo, index) => (\r\n                    <div className=\"mb-2\" key={index}>\r\n                    <span>{progressInfo.fileName}</span>\r\n                    <div className=\"progress\">\r\n                        <div\r\n                        className=\"progress-bar progress-bar-info\"\r\n                        role=\"progressbar\"\r\n                        aria-valuenow={progressInfo.percentage}\r\n                        aria-valuemin=\"0\"\r\n                        aria-valuemax=\"100\"\r\n                        style={{ width: progressInfo.percentage + \"%\" }}\r\n                        >\r\n                        {progressInfo.percentage}%\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                ))}\r\n\r\n                {this.renderAlertMessage()}\r\n                {this.renderResultMessage()}\r\n                \r\n                \r\n                { this.state.imagesList &&(\r\n                <div className=\"card mt-3\">\r\n                    <div className=\"card-header\">Lista de Imagenes</div>\r\n                    <ul className=\"list-group list-group-flush\">\r\n                       \r\n                            {this.state.imagesList.map((img, index) => (\r\n                        \r\n                                <li className=\"list-group-item\" key={index}>\r\n                                <p><a href={img.url} target=\"_blank\" rel=\"noreferrer\">Ver {img.name}</a></p>\r\n                                <p>{\"Tamaño original (ancho x alto):\"+img.width+\"px X \"+img.height+\"px\"}</p>\r\n                                <img src={img.url} alt={img.name} height=\"100px\"  />\r\n                                <div className=\"content-detail-info\"> \r\n                                    <button className=\"btn btn-info btn-sm\"\r\n                                    onClick={()=>this.resizeItem(img.width, img.height)}>Redimensionar</button> \r\n                                    </div> \r\n                                   \r\n                                </li>\r\n                            ))}\r\n                        \r\n             \r\n                    </ul>\r\n                </div>\r\n                )}\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      selectedFiles: state.selectedFiles\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {})(ImagesList);"]},"metadata":{},"sourceType":"module"}