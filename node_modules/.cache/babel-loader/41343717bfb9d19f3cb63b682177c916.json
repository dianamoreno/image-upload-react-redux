{"ast":null,"code":"/**\r\n * Algoritmo que permite reimensionar una imagen\r\n * preservando el ratio del ancho y alto de la imagen.\r\n */\nclass ResizeImage {\n  /*este metodo calcula el nuevo ancho y alto de la imagen teniendo en cuenta\r\n  el ancho y alto maximos, y el ancho y alto de la imagen original\r\n  como resultado retorna las nuevas dimensiones claculados\r\n  */\n  resize(maxWidth, maxHeight, width, height) {\n    let msg = \"\"; //validamos si la imagen original es más pequeña o igual en dimensiones\n    //a las dimensiones maximas definidas, si es así, se mantienen los tamaños originales \n\n    if (maxWidth >= width && maxHeight >= height) {\n      msg = \"El tamaño que debe tener la imagen para entrar en una hoja tamaño A4 (796 x 1123 pixeles) sin márgenes es el de la imagen original. Ancho: \" + width + \"px Alto: \" + height + \"px\";\n      return [msg, width, height, width, height];\n    } else {\n      //se calcula el ratio de los tamaños maximos deseados y los tamaños originales.\n      let widthRatio = maxWidth / width;\n      let heightRatio = maxHeight / height; // Ratio a usar para cacular las nuevas dimensiones de la imagen, debe ser el valor menor.\n      // para garantizar que al reducir la imagen las dos dimensiones queden por debajo del\n      // margen de los dos maximos\n\n      let ratio = widthRatio < heightRatio ? widthRatio : heightRatio; // Se calculcan las nueva dimensiones.\n\n      let newWidth = width * ratio;\n      let newHeight = height * ratio; //redondeamos valor decimal\n\n      if (newWidth === maxWidth) newHeight = Math.round(newHeight);\n      if (newHeight === maxHeight) newWidth = Math.round(newWidth);\n      msg = \"El tamaño que debe tener la imagen para entrar en una hoja tamaño A4 (796 x 1123 pixeles) sin márgenes es Ancho: \" + newWidth + \"px Alto: \" + newHeight + \"px. Tamaño original(\" + width + \"x\" + height + \")\";\n      return [msg, width, height, newWidth, newHeight];\n    }\n  }\n\n  orientation(width, height) {\n    return width > height ? \"Orientacion Pagina: VERTICAL\" : \"Orientacion Pagina: HORIZONTAL\";\n  }\n\n}\n\nexport default new ResizeImage();","map":{"version":3,"sources":["C:/Datos/Diana/node-projects/images-upload-resizer-redux/src/services/resizeImage.js"],"names":["ResizeImage","resize","maxWidth","maxHeight","width","height","msg","widthRatio","heightRatio","ratio","newWidth","newHeight","Math","round","orientation"],"mappings":"AAAA;AACA;AACA;AACA;AACA,MAAMA,WAAN,CAAkB;AAEd;AACJ;AACA;AACA;AACIC,EAAAA,MAAM,CAACC,QAAD,EAAWC,SAAX,EAAsBC,KAAtB,EAA6BC,MAA7B,EAAqC;AAEvC,QAAIC,GAAG,GAAG,EAAV,CAFuC,CAIvC;AACA;;AACA,QAAGJ,QAAQ,IAAIE,KAAZ,IAAqBD,SAAS,IAAIE,MAArC,EAA4C;AACxCC,MAAAA,GAAG,GAAG,gJAA8IF,KAA9I,GAAoJ,WAApJ,GAAgKC,MAAhK,GAAuK,IAA7K;AACA,aAAO,CAACC,GAAD,EAAMF,KAAN,EAAaC,MAAb,EAAqBD,KAArB,EAA4BC,MAA5B,CAAP;AAEH,KAJD,MAIQ;AAEJ;AACA,UAAIE,UAAU,GAAGL,QAAQ,GAAGE,KAA5B;AACA,UAAII,WAAW,GAAGL,SAAS,GAAGE,MAA9B,CAJI,CAMJ;AACA;AACA;;AACA,UAAII,KAAK,GAAGF,UAAU,GAAGC,WAAb,GAA0BD,UAA1B,GAAuCC,WAAnD,CATI,CAWJ;;AACA,UAAIE,QAAQ,GAAIN,KAAK,GAAIK,KAAzB;AACA,UAAIE,SAAS,GAAGN,MAAM,GAAGI,KAAzB,CAbI,CAeJ;;AACA,UAAGC,QAAQ,KAAKR,QAAhB,EAA0BS,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWF,SAAX,CAAZ;AAC1B,UAAGA,SAAS,KAAKR,SAAjB,EAA4BO,QAAQ,GAAGE,IAAI,CAACC,KAAL,CAAWH,QAAX,CAAX;AAE5BJ,MAAAA,GAAG,GAAG,sHAAoHI,QAApH,GAA6H,WAA7H,GAAyIC,SAAzI,GAAmJ,sBAAnJ,GAA0KP,KAA1K,GAAgL,GAAhL,GAAoLC,MAApL,GAA2L,GAAjM;AACA,aAAO,CAACC,GAAD,EAAMF,KAAN,EAAaC,MAAb,EAAqBK,QAArB,EAA+BC,SAA/B,CAAP;AACH;AACJ;;AAEDG,EAAAA,WAAW,CAACV,KAAD,EAAOC,MAAP,EAAe;AACxB,WAAOD,KAAK,GAAGC,MAAR,GAAgB,8BAAhB,GAAiD,gCAAxD;AACD;;AA1Ca;;AA6ChB,eAAe,IAAIL,WAAJ,EAAf","sourcesContent":["/**\r\n * Algoritmo que permite reimensionar una imagen\r\n * preservando el ratio del ancho y alto de la imagen.\r\n */\r\nclass ResizeImage {\r\n\r\n    /*este metodo calcula el nuevo ancho y alto de la imagen teniendo en cuenta\r\n    el ancho y alto maximos, y el ancho y alto de la imagen original\r\n    como resultado retorna las nuevas dimensiones claculados\r\n    */\r\n    resize(maxWidth, maxHeight, width, height) {\r\n\r\n        let msg = \"\";\r\n\r\n        //validamos si la imagen original es más pequeña o igual en dimensiones\r\n        //a las dimensiones maximas definidas, si es así, se mantienen los tamaños originales \r\n        if(maxWidth >= width && maxHeight >= height){\r\n            msg = \"El tamaño que debe tener la imagen para entrar en una hoja tamaño A4 (796 x 1123 pixeles) sin márgenes es el de la imagen original. Ancho: \"+width+\"px Alto: \"+height+\"px\";\r\n            return [msg, width, height, width, height]\r\n\r\n        }  else {\r\n\r\n            //se calcula el ratio de los tamaños maximos deseados y los tamaños originales.\r\n            let widthRatio = maxWidth / width;\r\n            let heightRatio = maxHeight / height;\r\n\r\n            // Ratio a usar para cacular las nuevas dimensiones de la imagen, debe ser el valor menor.\r\n            // para garantizar que al reducir la imagen las dos dimensiones queden por debajo del\r\n            // margen de los dos maximos\r\n            let ratio = widthRatio < heightRatio? widthRatio : heightRatio;\r\n\r\n            // Se calculcan las nueva dimensiones.\r\n            let newWidth  = width  * ratio;\r\n            let newHeight = height * ratio;\r\n            \r\n            //redondeamos valor decimal\r\n            if(newWidth === maxWidth) newHeight = Math.round(newHeight);\r\n            if(newHeight === maxHeight) newWidth = Math.round(newWidth);\r\n\r\n            msg = \"El tamaño que debe tener la imagen para entrar en una hoja tamaño A4 (796 x 1123 pixeles) sin márgenes es Ancho: \"+newWidth+\"px Alto: \"+newHeight+\"px. Tamaño original(\"+width+\"x\"+height+\")\";\r\n            return [msg, width, height, newWidth, newHeight]\r\n        }\r\n    }\r\n  \r\n    orientation(width,height) {\r\n      return width > height? \"Orientacion Pagina: VERTICAL\" : \"Orientacion Pagina: HORIZONTAL\" ;\r\n    }\r\n  }\r\n  \r\n  export default new ResizeImage();"]},"metadata":{},"sourceType":"module"}