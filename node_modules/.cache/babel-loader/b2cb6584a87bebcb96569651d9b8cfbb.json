{"ast":null,"code":"const initialState = {\n  showAlertMessage: false,\n  alertMessage: \"Inicio\",\n  showResultMessage: false,\n  resultMessageSize: \"\",\n  resultMessageOrientation: \"\",\n  selectedFiles: 0,\n  progressBar: [],\n  imagesList: [],\n  selectedImages: []\n}; //metodo que valida los actions para ejecutar la acción\n// correspondiente según la interaccion del usuario con la página\n\nconst uploadImage = (state = {}, action) => {\n  switch (action.type) {\n    case 'SELECCCIONAR_ARCHIVOS':\n      let selectedFiles = action.files;\n      let files = [];\n\n      for (let selectedFile of selectedFiles) {\n        files.push(selectedFile);\n      }\n      /*return [{\r\n          selectedImages: files\r\n      }]*/\n\n\n      return {\n        selectedImages: files\n      };\n\n    case 'CARGAR_ARCHIVOS':\n      /*return state.map(t =>\r\n          uploadImages(t, action)\r\n      )*/\n      return uploadImages(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default uploadImage; //metodo que evalua si todos las imagenes seleccionadas son de tipo JPG\n\nconst imageTypeValidation = (files, imageTypeAccepted) => {\n  for (let file of files) {\n    if (file.type.toLowerCase() !== imageTypeAccepted) return false;\n  }\n\n  return true;\n}; //método que recorre la lista de imagenes para mostrar el progreso de carga de cada una\n\n\nconst uploadImages = (state = {}, action) => {\n  const selectedFiles = state.selectedImages;\n  console.log(\"uploadImages selectedFiles.length:\" + selectedFiles.length + \" action.imgType: \" + action.imgType);\n\n  if (selectedFiles.length > 0) {\n    if (imageTypeValidation(selectedFiles, action.imgType)) {\n      // actualizamos limpiando el valor de estado del mensaje de alerta para que se renderice el DOM \n      let _progressBar = [];\n\n      for (let selectedFile of selectedFiles) {\n        _progressBar.push({\n          percentage: 0,\n          fileName: selectedFile.name\n        });\n      }\n\n      return { ...state,\n        showAlertMessage: false,\n        alertMessage: \"\",\n        progressBar: _progressBar\n      };\n      /*\r\n                  this.setState(\r\n                  {\r\n                      \r\n                  },\r\n                  () => {\r\n                      for (let i = 0; i < selectedFiles.length; i++) {\r\n                      this.upload(i, selectedFiles[i]);\r\n                      }\r\n                  });\r\n                  */\n    } else {\n      return { ...state,\n        showAlertMessage: true,\n        alertMessage: \"Solo se permiten imagenes tipo \" + action.imgType,\n        showResultMessage: false,\n        progressBar: []\n      };\n    }\n  } else {\n    return { ...state,\n      showAlertMessage: true,\n      alertMessage: \"No ha seleccionado ningún archivo aún!\",\n      showResultMessage: false,\n      progressBar: []\n    };\n  }\n};","map":{"version":3,"sources":["C:/Datos/Diana/node-projects/images-upload-resizer-redux/src/reducers/upload.js"],"names":["initialState","showAlertMessage","alertMessage","showResultMessage","resultMessageSize","resultMessageOrientation","selectedFiles","progressBar","imagesList","selectedImages","uploadImage","state","action","type","files","selectedFile","push","uploadImages","imageTypeValidation","imageTypeAccepted","file","toLowerCase","console","log","length","imgType","_progressBar","percentage","fileName","name"],"mappings":"AAAA,MAAMA,YAAY,GAAG;AACjBC,EAAAA,gBAAgB,EAAE,KADD;AAEjBC,EAAAA,YAAY,EAAE,QAFG;AAGjBC,EAAAA,iBAAiB,EAAE,KAHF;AAIjBC,EAAAA,iBAAiB,EAAE,EAJF;AAKjBC,EAAAA,wBAAwB,EAAE,EALT;AAMjBC,EAAAA,aAAa,EAAE,CANE;AAOjBC,EAAAA,WAAW,EAAE,EAPI;AAQjBC,EAAAA,UAAU,EAAE,EARK;AASjBC,EAAAA,cAAc,EAAE;AATC,CAArB,C,CAYA;AACA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAExC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,uBAAL;AAEI,UAAIP,aAAa,GAAGM,MAAM,CAACE,KAA3B;AACA,UAAIA,KAAK,GAAG,EAAZ;;AACA,WAAK,IAAIC,YAAT,IAAyBT,aAAzB,EAAwC;AACpCQ,QAAAA,KAAK,CAACE,IAAN,CAAWD,YAAX;AACH;AAED;AACZ;AACA;;;AAEY,aAAO;AACHN,QAAAA,cAAc,EAAEK;AADb,OAAP;;AAIJ,SAAK,iBAAL;AAEI;AACZ;AACA;AACY,aAAOG,YAAY,CAACN,KAAD,EAAQC,MAAR,CAAnB;;AAIJ;AACI,aAAOD,KAAP;AA3BR;AA6BH,CA/BD;;AAiCA,eAAeD,WAAf,C,CAEA;;AACA,MAAMQ,mBAAmB,GAAG,CAACJ,KAAD,EAAQK,iBAAR,KAA8B;AAGtD,OAAK,IAAIC,IAAT,IAAiBN,KAAjB,EAAwB;AACpB,QAAGM,IAAI,CAACP,IAAL,CAAUQ,WAAV,OAA4BF,iBAA/B,EACI,OAAO,KAAP;AACP;;AAED,SAAO,IAAP;AACH,CATD,C,CAUA;;;AACA,MAAMF,YAAY,GAAG,CAACN,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAEzC,QAAMN,aAAa,GAAGK,KAAK,CAACF,cAA5B;AACAa,EAAAA,OAAO,CAACC,GAAR,CAAY,uCAAqCjB,aAAa,CAACkB,MAAnD,GAA2D,mBAA3D,GAA+EZ,MAAM,CAACa,OAAlG;;AACA,MAAGnB,aAAa,CAACkB,MAAd,GAAuB,CAA1B,EAA4B;AAExB,QAAIN,mBAAmB,CAACZ,aAAD,EAAgBM,MAAM,CAACa,OAAvB,CAAvB,EAAwD;AACpD;AACA,UAAIC,YAAY,GAAG,EAAnB;;AACA,WAAK,IAAIX,YAAT,IAAyBT,aAAzB,EAAwC;AACpCoB,QAAAA,YAAY,CAACV,IAAb,CAAkB;AAAEW,UAAAA,UAAU,EAAE,CAAd;AAAiBC,UAAAA,QAAQ,EAAEb,YAAY,CAACc;AAAxC,SAAlB;AACH;;AAED,aAAO,EACH,GAAGlB,KADA;AAEHV,QAAAA,gBAAgB,EAAE,KAFf;AAGHC,QAAAA,YAAY,EAAE,EAHX;AAIHK,QAAAA,WAAW,EAAEmB;AAJV,OAAP;AASZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACS,KA3BD,MA2BO;AAEH,aAAO,EACH,GAAGf,KADA;AAEHV,QAAAA,gBAAgB,EAAE,IAFf;AAGHC,QAAAA,YAAY,EAAE,oCAAkCU,MAAM,CAACa,OAHpD;AAIHtB,QAAAA,iBAAiB,EAAE,KAJhB;AAKHI,QAAAA,WAAW,EAAE;AALV,OAAP;AAQH;AAEJ,GAzCD,MAyCO;AAEH,WAAO,EACH,GAAGI,KADA;AAEHV,MAAAA,gBAAgB,EAAE,IAFf;AAGHC,MAAAA,YAAY,EAAE,wCAHX;AAIHC,MAAAA,iBAAiB,EAAE,KAJhB;AAKHI,MAAAA,WAAW,EAAE;AALV,KAAP;AAOH;AACJ,CAvDD","sourcesContent":["const initialState = {\r\n    showAlertMessage: false,\r\n    alertMessage: \"Inicio\",\r\n    showResultMessage: false,\r\n    resultMessageSize: \"\",\r\n    resultMessageOrientation: \"\",\r\n    selectedFiles: 0,\r\n    progressBar: [],\r\n    imagesList: [],\r\n    selectedImages: []\r\n}\r\n\r\n//metodo que valida los actions para ejecutar la acción\r\n// correspondiente según la interaccion del usuario con la página\r\nconst uploadImage = (state = {}, action) => {\r\n\r\n    switch (action.type) {\r\n        case 'SELECCCIONAR_ARCHIVOS':\r\n\r\n            let selectedFiles = action.files;\r\n            let files = []\r\n            for (let selectedFile of selectedFiles) {\r\n                files.push(selectedFile);\r\n            }\r\n\r\n            /*return [{\r\n                selectedImages: files\r\n            }]*/\r\n\r\n            return {\r\n                selectedImages: files\r\n            }\r\n            \r\n        case 'CARGAR_ARCHIVOS' :\r\n            \r\n            /*return state.map(t =>\r\n                uploadImages(t, action)\r\n            )*/\r\n            return uploadImages(state, action)\r\n            \r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default uploadImage;\r\n\r\n//metodo que evalua si todos las imagenes seleccionadas son de tipo JPG\r\nconst imageTypeValidation = (files, imageTypeAccepted) => {\r\n\r\n\r\n    for (let file of files) {\r\n        if(file.type.toLowerCase() !== imageTypeAccepted)\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n//método que recorre la lista de imagenes para mostrar el progreso de carga de cada una\r\nconst uploadImages = (state = {}, action) => {\r\n\r\n    const selectedFiles = state.selectedImages\r\n    console.log(\"uploadImages selectedFiles.length:\"+selectedFiles.length+ \" action.imgType: \"+action.imgType)\r\n    if(selectedFiles.length > 0){\r\n\r\n        if( imageTypeValidation(selectedFiles, action.imgType) ){\r\n            // actualizamos limpiando el valor de estado del mensaje de alerta para que se renderice el DOM \r\n            let _progressBar = [];\r\n            for (let selectedFile of selectedFiles) {\r\n                _progressBar.push({ percentage: 0, fileName: selectedFile.name });\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                showAlertMessage: false,\r\n                alertMessage: \"\",\r\n                progressBar: _progressBar,\r\n            }\r\n           \r\n\r\n           \r\n/*\r\n            this.setState(\r\n            {\r\n                \r\n            },\r\n            () => {\r\n                for (let i = 0; i < selectedFiles.length; i++) {\r\n                this.upload(i, selectedFiles[i]);\r\n                }\r\n            });\r\n            */\r\n        } else {\r\n             \r\n            return {\r\n                ...state,\r\n                showAlertMessage: true,\r\n                alertMessage: \"Solo se permiten imagenes tipo \"+action.imgType,\r\n                showResultMessage: false,\r\n                progressBar: []                   \r\n            }\r\n            \r\n        }\r\n\r\n    } else {\r\n\r\n        return {\r\n            ...state,\r\n            showAlertMessage: true,\r\n            alertMessage: \"No ha seleccionado ningún archivo aún!\",\r\n            showResultMessage: false,\r\n            progressBar: []                           \r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}