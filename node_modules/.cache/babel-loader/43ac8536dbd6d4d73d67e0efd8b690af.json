{"ast":null,"code":"var _jsxFileName = \"C:\\\\Datos\\\\Diana\\\\node-projects\\\\images-upload-resizer-redux\\\\src\\\\components\\\\ImagesList.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { getImages } from \"../actions/imagesList\";\nimport { updateUploadProgress } from \"../actions/upload\";\nimport UploadService from \"../services/fileUpload\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ImagesList extends React.Component {\n  constructor(props) {\n    super(props); //tama침o de hoja A4 (796 x 1123 pixeles)\n\n    this.widthA4 = 796; //horizontal\n\n    this.heightA4 = 1123; //vertical\n\n    this.selectedImages = [];\n  } //metodo que se llama una vez se ha cargado el componente para hacer el request y \n  //traer la lista de imagenes disponibles en el servidor\n\n\n  componentDidMount() {\n    UploadService.getFiles().then(response => {\n      //lanzamos la accion que actualizara el estado\n      this.props.getImagesList(response.data);\n    }).catch(() => {\n      //si el servicio no esta disponible y da error retornamos null para ignorar esta acci칩n\n      return null;\n    });\n  }\n\n  uploadImages() {\n    let selectedFiles = this.props.selectedImages;\n\n    for (let i = 0; i < selectedFiles.length; i++) {\n      console.log(\"entra for\");\n      this.upload(i, selectedFiles[i]);\n    }\n  } //metodo que haciendo uso del servicios de Axios \n  //lanza la petici칩n web para al API que se encarga de subir los archivos \n  //al directorio local\n\n\n  upload(idx, file) {\n    console.log(\"entra update\");\n    let _progressBar = [...this.props.progressBar];\n    UploadService.upload(file, event => {\n      _progressBar[idx].percentage = Math.round(100 * event.loaded / event.total);\n      this.props.updateUploadProgressImg(_progressBar);\n      /*this.setState({\r\n        progressBar: _progressBar,\r\n      });*/\n    }).then(() => {\n      this.setState(prev => {\n        let nextMessage = \"Imagenes cargadas exitosamente\";\n        return {\n          showAlertMessage: true,\n          alertMessage: nextMessage,\n          selectedImages: []\n        };\n      });\n      /*\r\n                  return UploadService.getFiles()\r\n                  .then((files) => {\r\n                      this.setState({\r\n                          imagesList: files.data,\r\n                      });\r\n                  })*/\n\n      return {};\n    }).catch(() => {\n      _progressBar[idx].percentage = 0;\n      /*this.setState((prev) => {\r\n          let nextMessage = prev.alertMessage+\"No se pudo cargar la imagen: \" + file.name+\". \";\r\n          return {\r\n              progressBar: _progressBar,\r\n              showAlertMessage: true,\r\n              alertMessage: nextMessage,\r\n              showResultMessage: false,\r\n              procesarImagenes: false\r\n          };\r\n      });*/\n\n      return {};\n    });\n  }\n\n  render() {\n    //se activa el procesamiento de imagenes para la carga\n    if (this.props.procesarImagenes) this.uploadImages();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.props.showAlertMessage ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-danger\",\n        role: \"alert\",\n        children: this.props.alertMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 48\n      }, this) : null, this.props.showResultMessage ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-success\",\n        role: \"alert\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.props.resultMessageSize\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.props.resultMessageOrientation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }, this) : null, this.props.imagesList && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card mt-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-header\",\n          children: \"Lista de Imagenes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"list-group list-group-flush\",\n          children: this.props.imagesList.map((img, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"list-group-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                href: img.url,\n                target: \"_blank\",\n                rel: \"noreferrer\",\n                children: [\"Ver \", img.name]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 36\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Tama침o original (ancho x alto):\" + img.width + \"px X \" + img.height + \"px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: img.url,\n              alt: img.name,\n              height: \"100px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"content-detail-info\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-info btn-sm\",\n                onClick: () => this.resizeItem(img.width, img.height),\n                children: \"Redimensionar\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 33\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    alertMessage: state.uploadImage.alertMessage,\n    showAlertMessage: state.uploadImage.showAlertMessage,\n    showResultMessage: state.uploadImage.showResultMessage,\n    resultMessageSize: state.uploadImage.resultMessageSize,\n    resultMessageOrientation: state.uploadImage.resultMessageOrientation,\n    imagesList: state.uploadImage.imagesList,\n    selectedImages: state.uploadImage.selectedImages,\n    procesarImagenes: state.uploadImage.procesarImagenes,\n    progressBar: state.uploadImage.progressBar\n  };\n};\n\nconst mapDispatchToProps = (dispatch, props) => {\n  return {\n    getImagesList: data => dispatch(getImages(data)),\n    updateUploadProgressImg: progress => dispatch(updateUploadProgress(progress))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ImagesList);","map":{"version":3,"sources":["C:/Datos/Diana/node-projects/images-upload-resizer-redux/src/components/ImagesList.js"],"names":["React","connect","getImages","updateUploadProgress","UploadService","ImagesList","Component","constructor","props","widthA4","heightA4","selectedImages","componentDidMount","getFiles","then","response","getImagesList","data","catch","uploadImages","selectedFiles","i","length","console","log","upload","idx","file","_progressBar","progressBar","event","percentage","Math","round","loaded","total","updateUploadProgressImg","setState","prev","nextMessage","showAlertMessage","alertMessage","render","procesarImagenes","showResultMessage","resultMessageSize","resultMessageOrientation","imagesList","map","img","index","url","name","width","height","resizeItem","mapStateToProps","state","uploadImage","mapDispatchToProps","dispatch","progress"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {getImages} from \"../actions/imagesList\"\r\nimport {updateUploadProgress} from \"../actions/upload\"\r\nimport UploadService from \"../services/fileUpload\";\r\n\r\n\r\nclass ImagesList extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n                \r\n        //tama침o de hoja A4 (796 x 1123 pixeles)\r\n        this.widthA4 = 796; //horizontal\r\n        this.heightA4 = 1123; //vertical\r\n\r\n        this.selectedImages = [];\r\n\r\n    }\r\n\r\n    //metodo que se llama una vez se ha cargado el componente para hacer el request y \r\n    //traer la lista de imagenes disponibles en el servidor\r\n    componentDidMount() {\r\n        UploadService.getFiles()\r\n            .then((response) => {\r\n                //lanzamos la accion que actualizara el estado\r\n                this.props.getImagesList(response.data)\r\n            \r\n            })\r\n            .catch(() => {\r\n                //si el servicio no esta disponible y da error retornamos null para ignorar esta acci칩n\r\n                return null;\r\n            });\r\n    }\r\n\r\n    uploadImages(){\r\n        \r\n        let selectedFiles = this.props.selectedImages\r\n        for (let i = 0; i < selectedFiles.length; i++) {\r\n            console.log(\"entra for\")\r\n            this.upload(i, selectedFiles[i]);\r\n        }\r\n    }\r\n\r\n    //metodo que haciendo uso del servicios de Axios \r\n    //lanza la petici칩n web para al API que se encarga de subir los archivos \r\n    //al directorio local\r\n    upload(idx, file) {\r\n        console.log(\"entra update\")\r\n        let _progressBar = [...this.props.progressBar];\r\n    \r\n        UploadService.upload(file, (event) => {\r\n          _progressBar[idx].percentage = Math.round((100 * event.loaded) / event.total);\r\n          this.props.updateUploadProgressImg(_progressBar)\r\n\r\n          /*this.setState({\r\n            progressBar: _progressBar,\r\n          });*/\r\n        })\r\n        .then(() => {\r\n            \r\n            this.setState((prev) => {\r\n                let nextMessage = \"Imagenes cargadas exitosamente\"\r\n                return {\r\n                    showAlertMessage: true,\r\n                    alertMessage: nextMessage,\r\n                    selectedImages: []\r\n                };\r\n            });\r\n/*\r\n            return UploadService.getFiles()\r\n            .then((files) => {\r\n                this.setState({\r\n                    imagesList: files.data,\r\n                });\r\n            })*/\r\n            return {}\r\n        })\r\n        .catch(() => {\r\n            _progressBar[idx].percentage = 0;\r\n            /*this.setState((prev) => {\r\n                let nextMessage = prev.alertMessage+\"No se pudo cargar la imagen: \" + file.name+\". \";\r\n                return {\r\n                    progressBar: _progressBar,\r\n                    showAlertMessage: true,\r\n                    alertMessage: nextMessage,\r\n                    showResultMessage: false,\r\n                    procesarImagenes: false\r\n                };\r\n            });*/\r\n\r\n            return {}\r\n        });\r\n        \r\n    }\r\n\r\n\r\n    render (){\r\n\r\n        //se activa el procesamiento de imagenes para la carga\r\n        if(this.props.procesarImagenes) this.uploadImages()\r\n\r\n        return (\r\n            <div>\r\n                {this.props.showAlertMessage ? <div className=\"alert alert-danger\" role=\"alert\">{this.props.alertMessage}</div> : null}\r\n\r\n                {this.props.showResultMessage ?  \r\n\r\n                    <div className=\"alert alert-success\" role=\"alert\">\r\n                        <p>{this.props.resultMessageSize}</p>\r\n                        <p>{this.props.resultMessageOrientation}</p>\r\n                    </div> : null\r\n                }\r\n\r\n                { this.props.imagesList &&(\r\n                <div className=\"card mt-3\">\r\n                    <div className=\"card-header\">Lista de Imagenes</div>\r\n                    <ul className=\"list-group list-group-flush\">\r\n                    \r\n                            {this.props.imagesList.map((img, index) => (\r\n                        \r\n                                <li className=\"list-group-item\" key={index}>\r\n                                <p><a href={img.url} target=\"_blank\" rel=\"noreferrer\">Ver {img.name}</a></p>\r\n                                <p>{\"Tama침o original (ancho x alto):\"+img.width+\"px X \"+img.height+\"px\"}</p>\r\n                                <img src={img.url} alt={img.name} height=\"100px\"  />\r\n                                <div className=\"content-detail-info\"> \r\n                                    <button className=\"btn btn-info btn-sm\"\r\n                                    onClick={()=>this.resizeItem(img.width, img.height)}>Redimensionar</button> \r\n                                    </div> \r\n                                \r\n                                </li>\r\n                            ))}\r\n                        \r\n            \r\n                    </ul>\r\n                </div>\r\n                )}\r\n\r\n            </div>\r\n        )\r\n    }   \r\n    \r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        alertMessage: state.uploadImage.alertMessage,\r\n        showAlertMessage: state.uploadImage.showAlertMessage,\r\n        showResultMessage: state.uploadImage.showResultMessage,\r\n        resultMessageSize: state.uploadImage.resultMessageSize,\r\n        resultMessageOrientation: state.uploadImage.resultMessageOrientation,\r\n        imagesList: state.uploadImage.imagesList,\r\n        selectedImages: state.uploadImage.selectedImages,\r\n        procesarImagenes: state.uploadImage.procesarImagenes,\r\n        progressBar: state.uploadImage.progressBar\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n\r\n    return {\r\n        getImagesList: (data) => dispatch(getImages(data)),\r\n        updateUploadProgressImg: (progress) => dispatch(updateUploadProgress(progress))\r\n    }\r\n    \r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(ImagesList);"]},"metadata":{},"sourceType":"module"}