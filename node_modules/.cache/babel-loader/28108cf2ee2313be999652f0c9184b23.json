{"ast":null,"code":"const initialState = {\n  showAlertMessage: false,\n  alertMessage: \"\",\n  showResultMessage: false,\n  resultMessageSize: \"\",\n  resultMessageOrientation: \"\",\n  selectedFiles: 0,\n  progressBar: [],\n  imagesList: [],\n  selectedImages: []\n}; //metodo que valida los actions para ejecutar la acción\n// correspondiente según la interaccion del usuario con la página\n\nconst uploadImage = (state = initialState, action) => {\n  switch (action.type) {\n    case 'SELECCCIONAR_ARCHIVOS':\n      let selectedFiles = action.files;\n      let files = [];\n\n      for (let selectedFile of selectedFiles) {\n        files.push({\n          name: selectedFile.name,\n          type: selectedFile.type\n        });\n      }\n\n      return { ...state,\n        selectedImages: files\n      };\n\n    case 'CARGAR_ARCHIVOS':\n      return state.map(t => uploadImages(t));\n\n    default:\n      return state;\n  }\n};\n\nexport default uploadImage; //método que recorreo la lista de imagenes para mostrar el progreso de carga de cada una\n\nconst uploadImages = (state = {}) => {\n  const selectedFiles = state.selectedImages;\n  console.log(\"uploadImages selectedFiles.length:\" + selectedFiles.length);\n\n  if (selectedFiles.length > 0) {\n    /*  if( this.imageTypeValidation() ){\r\n          // actualizamos valor de estado del mensaje de alerta para que se renderice el DOM \r\n          this.setState((state) => { \r\n              return {\r\n                  showAlertMessage: false,\r\n                  alertMessage: \"\"\r\n              }\r\n          }) \r\n            let _progressBar = [];\r\n          for (let selectedFile of selectedFiles) {\r\n              _progressBar.push({ percentage: 0, fileName: selectedFile.name });\r\n          }\r\n            this.setState(\r\n          {\r\n              progressBar: _progressBar,\r\n          },\r\n          () => {\r\n              for (let i = 0; i < selectedFiles.length; i++) {\r\n              this.upload(i, selectedFiles[i]);\r\n              }\r\n          });\r\n      } else {\r\n          this.setState((state) => { \r\n              return {\r\n                  showAlertMessage: true,\r\n                  alertMessage: \"Solo se permiten imagenes tipo \"+this.imageTypeAccepted,\r\n                  showResultMessage: false                    \r\n              }\r\n          }) \r\n      }\r\n    */\n  } else {\n    return {\n      showAlertMessage: true,\n      alertMessage: \"No ha seleccionado ningún archivo aún!\",\n      showResultMessage: false\n    };\n  }\n};","map":{"version":3,"sources":["C:/Datos/Diana/node-projects/images-upload-resizer-redux/src/reducers/upload.js"],"names":["initialState","showAlertMessage","alertMessage","showResultMessage","resultMessageSize","resultMessageOrientation","selectedFiles","progressBar","imagesList","selectedImages","uploadImage","state","action","type","files","selectedFile","push","name","map","t","uploadImages","console","log","length"],"mappings":"AAAA,MAAMA,YAAY,GAAG;AACjBC,EAAAA,gBAAgB,EAAE,KADD;AAEjBC,EAAAA,YAAY,EAAE,EAFG;AAGjBC,EAAAA,iBAAiB,EAAE,KAHF;AAIjBC,EAAAA,iBAAiB,EAAE,EAJF;AAKjBC,EAAAA,wBAAwB,EAAE,EALT;AAMjBC,EAAAA,aAAa,EAAE,CANE;AAOjBC,EAAAA,WAAW,EAAE,EAPI;AAQjBC,EAAAA,UAAU,EAAE,EARK;AASjBC,EAAAA,cAAc,EAAE;AATC,CAArB,C,CAYA;AACA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGX,YAAT,EAAuBY,MAAvB,KAAkC;AAElD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,uBAAL;AAEI,UAAIP,aAAa,GAAGM,MAAM,CAACE,KAA3B;AACA,UAAIA,KAAK,GAAG,EAAZ;;AACA,WAAK,IAAIC,YAAT,IAAyBT,aAAzB,EAAwC;AACpCQ,QAAAA,KAAK,CAACE,IAAN,CAAW;AAAEC,UAAAA,IAAI,EAAEF,YAAY,CAACE,IAArB;AAA4BJ,UAAAA,IAAI,EAAGE,YAAY,CAACF;AAAhD,SAAX;AACH;;AAED,aAAO,EACP,GAAGF,KADI;AAEPF,QAAAA,cAAc,EAAEK;AAFT,OAAP;;AAIJ,SAAK,iBAAL;AAEI,aAAOH,KAAK,CAACO,GAAN,CAAUC,CAAC,IAAIC,YAAY,CAACD,CAAD,CAA3B,CAAP;;AAEJ;AACI,aAAOR,KAAP;AAlBR;AAoBH,CAtBD;;AAwBA,eAAeD,WAAf,C,CAEA;;AACA,MAAMU,YAAY,GAAG,CAACT,KAAK,GAAG,EAAT,KAAgB;AAEjC,QAAML,aAAa,GAAGK,KAAK,CAACF,cAA5B;AACAY,EAAAA,OAAO,CAACC,GAAR,CAAY,uCAAqChB,aAAa,CAACiB,MAA/D;;AACA,MAAGjB,aAAa,CAACiB,MAAd,GAAuB,CAA1B,EAA4B;AAE1B;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGK,GAnCD,MAmCO;AAEH,WAAO;AACHtB,MAAAA,gBAAgB,EAAE,IADf;AAEHC,MAAAA,YAAY,EAAE,wCAFX;AAGHC,MAAAA,iBAAiB,EAAE;AAHhB,KAAP;AAKH;AACJ,CA/CD","sourcesContent":["const initialState = {\r\n    showAlertMessage: false,\r\n    alertMessage: \"\",\r\n    showResultMessage: false,\r\n    resultMessageSize: \"\",\r\n    resultMessageOrientation: \"\",\r\n    selectedFiles: 0,\r\n    progressBar: [],\r\n    imagesList: [],\r\n    selectedImages: []\r\n}\r\n\r\n//metodo que valida los actions para ejecutar la acción\r\n// correspondiente según la interaccion del usuario con la página\r\nconst uploadImage = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case 'SELECCCIONAR_ARCHIVOS':\r\n\r\n            let selectedFiles = action.files;\r\n            let files = []\r\n            for (let selectedFile of selectedFiles) {\r\n                files.push({ name: selectedFile.name , type : selectedFile.type});\r\n            }\r\n           \r\n            return {\r\n            ...state,\r\n            selectedImages: files\r\n            }\r\n        case 'CARGAR_ARCHIVOS' :\r\n            \r\n            return state.map(t => uploadImages(t) )\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default uploadImage;\r\n\r\n//método que recorreo la lista de imagenes para mostrar el progreso de carga de cada una\r\nconst uploadImages = (state = {}) => {\r\n\r\n    const selectedFiles = state.selectedImages\r\n    console.log(\"uploadImages selectedFiles.length:\"+selectedFiles.length)\r\n    if(selectedFiles.length > 0){\r\n\r\n      /*  if( this.imageTypeValidation() ){\r\n            // actualizamos valor de estado del mensaje de alerta para que se renderice el DOM \r\n            this.setState((state) => { \r\n                return {\r\n                    showAlertMessage: false,\r\n                    alertMessage: \"\"\r\n                }\r\n            }) \r\n\r\n            let _progressBar = [];\r\n            for (let selectedFile of selectedFiles) {\r\n                _progressBar.push({ percentage: 0, fileName: selectedFile.name });\r\n            }\r\n\r\n            this.setState(\r\n            {\r\n                progressBar: _progressBar,\r\n            },\r\n            () => {\r\n                for (let i = 0; i < selectedFiles.length; i++) {\r\n                this.upload(i, selectedFiles[i]);\r\n                }\r\n            });\r\n        } else {\r\n            this.setState((state) => { \r\n                return {\r\n                    showAlertMessage: true,\r\n                    alertMessage: \"Solo se permiten imagenes tipo \"+this.imageTypeAccepted,\r\n                    showResultMessage: false                    \r\n                }\r\n            }) \r\n        }\r\n*/\r\n    } else {\r\n\r\n        return {\r\n            showAlertMessage: true,\r\n            alertMessage: \"No ha seleccionado ningún archivo aún!\",\r\n            showResultMessage: false                    \r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}