{"ast":null,"code":"import UploadService from \"../services/fileUpload\"; //metodo que valida los actions para ejecutar la acción\n// correspondiente según la interaccion del usuario con la página\n\nconst uploadImage = (state = {}, action) => {\n  switch (action.type) {\n    case 'SELECCCIONAR_ARCHIVOS':\n      let selectedFiles = action.files;\n      let files = [];\n\n      for (let selectedFile of selectedFiles) {\n        files.push(selectedFile);\n      }\n      /*return [{\r\n          selectedImages: files\r\n      }]*/\n\n\n      return {\n        selectedImages: files\n      };\n\n    case 'CARGAR_ARCHIVOS':\n      /*return state.map(t =>\r\n          uploadImages(t, action)\r\n      )*/\n      return uploadImages(state, action);\n\n    case 'OBTENER_ARCHIVOS':\n      console.log(\"OBTENER_ARCHIVOS\");\n      return getImages(state);\n\n    default:\n      return state;\n  }\n};\n\nexport default uploadImage; //metodo que recuoera todas las imagenes alojadas en el servidor\n\nconst getImages = state => {\n  UploadService.getFiles().then(response => {\n    console.log(\"then\");\n    return { ...state,\n      imagesList: response.data\n    };\n  }).catch(() => {\n    console.log(\"catch\"); //si el servicio no esta disponible y da error retornamos null para ignorar este action\n\n    return null;\n  });\n}; //metodo que evalua si todos las imagenes seleccionadas son de tipo JPG\n\n\nconst imageTypeValidation = (files, imageTypeAccepted) => {\n  for (let file of files) {\n    if (file.type.toLowerCase() !== imageTypeAccepted) return false;\n  }\n\n  return true;\n}; //método que recorre la lista de imagenes para mostrar el progreso de carga de cada una\n\n\nconst uploadImages = (state = {}, action) => {\n  const selectedFiles = state.selectedImages;\n  console.log(\"uploadImages selectedFiles.length:\" + selectedFiles.length + \" action.imgType: \" + action.imgType);\n\n  if (selectedFiles.length > 0) {\n    if (imageTypeValidation(selectedFiles, action.imgType)) {\n      // actualizamos limpiando el valor de estado del mensaje de alerta para que se renderice el DOM \n      let _progressBar = [];\n\n      for (let selectedFile of selectedFiles) {\n        _progressBar.push({\n          percentage: 0,\n          fileName: selectedFile.name\n        });\n      }\n\n      return { ...state,\n        showAlertMessage: false,\n        alertMessage: \"\",\n        progressBar: _progressBar\n      };\n      /*\r\n                  this.setState(\r\n                  {\r\n                      \r\n                  },\r\n                  () => {\r\n                      for (let i = 0; i < selectedFiles.length; i++) {\r\n                      this.upload(i, selectedFiles[i]);\r\n                      }\r\n                  });\r\n                  */\n    } else {\n      return { ...state,\n        showAlertMessage: true,\n        alertMessage: \"Solo se permiten imagenes tipo \" + action.imgType,\n        showResultMessage: false,\n        progressBar: []\n      };\n    }\n  } else {\n    return { ...state,\n      showAlertMessage: true,\n      alertMessage: \"No ha seleccionado ningún archivo aún!\",\n      showResultMessage: false,\n      progressBar: []\n    };\n  }\n};","map":{"version":3,"sources":["C:/Datos/Diana/node-projects/images-upload-resizer-redux/src/reducers/upload.js"],"names":["UploadService","uploadImage","state","action","type","selectedFiles","files","selectedFile","push","selectedImages","uploadImages","console","log","getImages","getFiles","then","response","imagesList","data","catch","imageTypeValidation","imageTypeAccepted","file","toLowerCase","length","imgType","_progressBar","percentage","fileName","name","showAlertMessage","alertMessage","progressBar","showResultMessage"],"mappings":"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","sourcesContent":["import UploadService from \"../services/fileUpload\";\r\n\r\n//metodo que valida los actions para ejecutar la acción\r\n// correspondiente según la interaccion del usuario con la página\r\nconst uploadImage = (state = {}, action) => {\r\n\r\n    switch (action.type) {\r\n        case 'SELECCCIONAR_ARCHIVOS':\r\n\r\n            let selectedFiles = action.files;\r\n            let files = []\r\n            for (let selectedFile of selectedFiles) {\r\n                files.push(selectedFile);\r\n            }\r\n\r\n            /*return [{\r\n                selectedImages: files\r\n            }]*/\r\n\r\n            return {\r\n                selectedImages: files\r\n            }\r\n            \r\n        case 'CARGAR_ARCHIVOS' :\r\n            \r\n            /*return state.map(t =>\r\n                uploadImages(t, action)\r\n            )*/\r\n            return uploadImages(state, action)\r\n            \r\n        case 'OBTENER_ARCHIVOS':\r\n            console.log(\"OBTENER_ARCHIVOS\")\r\n            return getImages(state)\r\n            \r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default uploadImage;\r\n\r\n//metodo que recuoera todas las imagenes alojadas en el servidor\r\nconst getImages = (state) =>{\r\n\r\n    UploadService.getFiles()\r\n    .then((response) => {\r\n        console.log(\"then\")\r\n       return {\r\n           ...state,\r\n            imagesList: response.data\r\n        }\r\n    })\r\n    .catch(() => {\r\n        console.log(\"catch\")\r\n        //si el servicio no esta disponible y da error retornamos null para ignorar este action\r\n        return null;\r\n    });\r\n}\r\n\r\n//metodo que evalua si todos las imagenes seleccionadas son de tipo JPG\r\nconst imageTypeValidation = (files, imageTypeAccepted) => {\r\n\r\n\r\n    for (let file of files) {\r\n        if(file.type.toLowerCase() !== imageTypeAccepted)\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n//método que recorre la lista de imagenes para mostrar el progreso de carga de cada una\r\nconst uploadImages = (state = {}, action) => {\r\n\r\n    const selectedFiles = state.selectedImages\r\n    console.log(\"uploadImages selectedFiles.length:\"+selectedFiles.length+ \" action.imgType: \"+action.imgType)\r\n    if(selectedFiles.length > 0){\r\n\r\n        if( imageTypeValidation(selectedFiles, action.imgType) ){\r\n            // actualizamos limpiando el valor de estado del mensaje de alerta para que se renderice el DOM \r\n            let _progressBar = [];\r\n            for (let selectedFile of selectedFiles) {\r\n                _progressBar.push({ percentage: 0, fileName: selectedFile.name });\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                showAlertMessage: false,\r\n                alertMessage: \"\",\r\n                progressBar: _progressBar,\r\n            }\r\n           \r\n\r\n           \r\n/*\r\n            this.setState(\r\n            {\r\n                \r\n            },\r\n            () => {\r\n                for (let i = 0; i < selectedFiles.length; i++) {\r\n                this.upload(i, selectedFiles[i]);\r\n                }\r\n            });\r\n            */\r\n        } else {\r\n             \r\n            return {\r\n                ...state,\r\n                showAlertMessage: true,\r\n                alertMessage: \"Solo se permiten imagenes tipo \"+action.imgType,\r\n                showResultMessage: false,\r\n                progressBar: []                   \r\n            }\r\n            \r\n        }\r\n\r\n    } else {\r\n\r\n        return {\r\n            ...state,\r\n            showAlertMessage: true,\r\n            alertMessage: \"No ha seleccionado ningún archivo aún!\",\r\n            showResultMessage: false,\r\n            progressBar: []                           \r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}