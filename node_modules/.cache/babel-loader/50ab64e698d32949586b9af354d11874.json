{"ast":null,"code":"import UploadService from \"../services/fileUpload\"; //metodo que valida los actions para ejecutar la acción\n// correspondiente según la interaccion del usuario con la página\n\nconst uploadImage = (state = {}, action) => {\n  switch (action.type) {\n    case 'SELECCCIONAR_ARCHIVOS':\n      let selectedFiles = action.files;\n      let files = [];\n\n      for (let selectedFile of selectedFiles) {\n        files.push(selectedFile);\n      }\n\n      return { ...state,\n        selectedImages: files\n      };\n\n    case 'CARGAR_ARCHIVOS':\n      return uploadImages(state, action);\n\n    case 'LISTAR_IMAGENES':\n      return { ...state,\n        imagesList: action.list\n      };\n\n    case 'REFRESCAR_PROGRESO_CARGA':\n      return { ...state,\n        progressBar: action.progress,\n        procesarImagenes: \"\"\n      };\n\n    case \"FINALIZAR_CARGA\":\n      return { ...state,\n        progressBar: [],\n        procesarImagenes: \"\",\n        showAlertMessage: true,\n        alertMessage: action.text,\n        selectedImages: []\n      };\n\n    case \"REDIMENSIONAR_IMAGEN\":\n      return { ...state,\n        showAlertMessage: false,\n        showResultMessage: true,\n        resultMessageSize: action.msg,\n        resultMessageOrientation: action.orientation,\n        progressBar: []\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default uploadImage; //metodo que evalua si todos las imagenes seleccionadas son de tipo JPG\n\nconst imageTypeValidation = (files, imageTypeAccepted) => {\n  for (let file of files) {\n    if (file.type.toLowerCase() !== imageTypeAccepted) return false;\n  }\n\n  return true;\n}; //método que recorre la lista de imagenes para mostrar la barra del progreso de carga de cada una\n\n\nconst uploadImages = (state = {}, action) => {\n  const selectedFiles = state.selectedImages;\n\n  if (selectedFiles.length > 0) {\n    if (imageTypeValidation(selectedFiles, action.imgType)) {\n      // actualizamos limpiando el valor de estado del mensaje de alerta para que se renderice el DOM \n      let _progressBar = [];\n\n      for (let selectedFile of selectedFiles) {\n        _progressBar.push({\n          percentage: 0,\n          fileName: selectedFile.name\n        });\n      }\n\n      return { ...state,\n        showAlertMessage: false,\n        alertMessage: \"\",\n        progressBar: _progressBar,\n        procesarImagenes: \"S\"\n      };\n    } else {\n      return { ...state,\n        showAlertMessage: true,\n        alertMessage: \"Solo se permiten imagenes tipo \" + action.imgType,\n        showResultMessage: false,\n        progressBar: [],\n        procesarImagenes: \"\"\n      };\n    }\n  } else {\n    return { ...state,\n      showAlertMessage: true,\n      alertMessage: \"No ha seleccionado ningún archivo aún!\",\n      showResultMessage: false,\n      progressBar: [],\n      procesarImagenes: \"\"\n    };\n  }\n};","map":{"version":3,"sources":["C:/Datos/Diana/node-projects/images-upload-resizer-redux/src/reducers/upload.js"],"names":["UploadService","uploadImage","state","action","type","selectedFiles","files","selectedFile","push","selectedImages","uploadImages","imagesList","list","progressBar","progress","procesarImagenes","showAlertMessage","alertMessage","text","showResultMessage","resultMessageSize","msg","resultMessageOrientation","orientation","imageTypeValidation","imageTypeAccepted","file","toLowerCase","length","imgType","_progressBar","percentage","fileName","name"],"mappings":"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","sourcesContent":["import UploadService from \"../services/fileUpload\";\r\n\r\n//metodo que valida los actions para ejecutar la acción\r\n// correspondiente según la interaccion del usuario con la página\r\nconst uploadImage = (state = {}, action) => {\r\n\r\n    switch (action.type) {\r\n        case 'SELECCCIONAR_ARCHIVOS':\r\n\r\n            let selectedFiles = action.files;\r\n            let files = []\r\n            for (let selectedFile of selectedFiles) {\r\n                files.push(selectedFile);\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                selectedImages: files\r\n            }\r\n            \r\n        case 'CARGAR_ARCHIVOS' :\r\n            return uploadImages(state, action)\r\n            \r\n        case 'LISTAR_IMAGENES':\r\n            return {\r\n                ...state,\r\n                imagesList: action.list\r\n            }\r\n\r\n        case 'REFRESCAR_PROGRESO_CARGA' :\r\n            return{\r\n                ...state,\r\n                progressBar: action.progress,\r\n                procesarImagenes: \"\"\r\n            }\r\n        \r\n        case \"FINALIZAR_CARGA\":\r\n            return{\r\n                ...state,\r\n                progressBar: [],\r\n                procesarImagenes: \"\",\r\n                showAlertMessage: true,\r\n                alertMessage: action.text,\r\n                selectedImages: []\r\n            }\r\n\r\n        case \"REDIMENSIONAR_IMAGEN\":\r\n            return{\r\n                ...state,\r\n                showAlertMessage: false,\r\n                showResultMessage: true,\r\n                resultMessageSize: action.msg,\r\n                resultMessageOrientation: action.orientation,\r\n                progressBar: []\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default uploadImage;\r\n\r\n//metodo que evalua si todos las imagenes seleccionadas son de tipo JPG\r\nconst imageTypeValidation = (files, imageTypeAccepted) => {\r\n\r\n\r\n    for (let file of files) {\r\n        if(file.type.toLowerCase() !== imageTypeAccepted)\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n//método que recorre la lista de imagenes para mostrar la barra del progreso de carga de cada una\r\nconst uploadImages = (state = {}, action) => {\r\n\r\n    const selectedFiles = state.selectedImages\r\n\r\n    if(selectedFiles.length > 0){\r\n\r\n        if( imageTypeValidation(selectedFiles, action.imgType) ){\r\n            // actualizamos limpiando el valor de estado del mensaje de alerta para que se renderice el DOM \r\n            let _progressBar = [];\r\n            for (let selectedFile of selectedFiles) {\r\n                _progressBar.push({ percentage: 0, fileName: selectedFile.name });\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                showAlertMessage: false,\r\n                alertMessage: \"\",\r\n                progressBar: _progressBar,\r\n                procesarImagenes: \"S\"\r\n            }\r\n          \r\n        } else {\r\n             \r\n            return {\r\n                ...state,\r\n                showAlertMessage: true,\r\n                alertMessage: \"Solo se permiten imagenes tipo \"+action.imgType,\r\n                showResultMessage: false,\r\n                progressBar: [],\r\n                procesarImagenes: \"\"                   \r\n            }\r\n            \r\n        }\r\n\r\n    } else {\r\n\r\n        return {\r\n            ...state,\r\n            showAlertMessage: true,\r\n            alertMessage: \"No ha seleccionado ningún archivo aún!\",\r\n            showResultMessage: false,\r\n            progressBar: [],\r\n            procesarImagenes: \"\"                           \r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}