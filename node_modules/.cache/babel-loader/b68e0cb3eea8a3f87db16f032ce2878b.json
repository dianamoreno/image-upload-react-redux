{"ast":null,"code":"import UploadService from \"../services/fileUpload\"; //metodo que valida los actions para ejecutar la acción\n// correspondiente según la interaccion del usuario con la página\n\nconst uploadImage = (state = {}, action) => {\n  switch (action.type) {\n    case 'SELECCCIONAR_ARCHIVOS':\n      let selectedFiles = action.files;\n      let files = [];\n\n      for (let selectedFile of selectedFiles) {\n        files.push(selectedFile);\n      }\n\n      return { ...state,\n        selectedImages: files\n      };\n\n    case 'CARGAR_ARCHIVOS':\n      return uploadImages(state, action);\n\n    case 'LISTA_IMAGENES':\n      return { ...state,\n        imagesList: action.list\n      };\n\n    case 'PROGRESO_CARGA':\n      return { ...state,\n        progressBar: action.progress,\n        procesarImagenes: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default uploadImage; //metodo que evalua si todos las imagenes seleccionadas son de tipo JPG\n\nconst imageTypeValidation = (files, imageTypeAccepted) => {\n  for (let file of files) {\n    if (file.type.toLowerCase() !== imageTypeAccepted) return false;\n  }\n\n  return true;\n}; //método que recorre la lista de imagenes para mostrar la barra del progreso de carga de cada una\n\n\nconst uploadImages = (state = {}, action) => {\n  const selectedFiles = state.selectedImages;\n\n  if (selectedFiles.length > 0) {\n    if (imageTypeValidation(selectedFiles, action.imgType)) {\n      // actualizamos limpiando el valor de estado del mensaje de alerta para que se renderice el DOM \n      let _progressBar = [];\n\n      for (let selectedFile of selectedFiles) {\n        _progressBar.push({\n          percentage: 0,\n          fileName: selectedFile.name\n        });\n      }\n\n      return { ...state,\n        showAlertMessage: false,\n        alertMessage: \"\",\n        progressBar: _progressBar,\n        procesarImagenes: true\n      };\n    } else {\n      return { ...state,\n        showAlertMessage: true,\n        alertMessage: \"Solo se permiten imagenes tipo \" + action.imgType,\n        showResultMessage: false,\n        progressBar: [],\n        procesarImagenes: false\n      };\n    }\n  } else {\n    return { ...state,\n      showAlertMessage: true,\n      alertMessage: \"No ha seleccionado ningún archivo aún!\",\n      showResultMessage: false,\n      progressBar: [],\n      procesarImagenes: false\n    };\n  }\n};","map":{"version":3,"sources":["C:/Datos/Diana/node-projects/images-upload-resizer-redux/src/reducers/upload.js"],"names":["UploadService","uploadImage","state","action","type","selectedFiles","files","selectedFile","push","selectedImages","uploadImages","imagesList","list","progressBar","progress","procesarImagenes","imageTypeValidation","imageTypeAccepted","file","toLowerCase","length","imgType","_progressBar","percentage","fileName","name","showAlertMessage","alertMessage","showResultMessage"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,wBAA1B,C,CAEA;AACA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAExC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,uBAAL;AAEI,UAAIC,aAAa,GAAGF,MAAM,CAACG,KAA3B;AACA,UAAIA,KAAK,GAAG,EAAZ;;AACA,WAAK,IAAIC,YAAT,IAAyBF,aAAzB,EAAwC;AACpCC,QAAAA,KAAK,CAACE,IAAN,CAAWD,YAAX;AACH;;AAED,aAAO,EACH,GAAGL,KADA;AAEHO,QAAAA,cAAc,EAAEH;AAFb,OAAP;;AAKJ,SAAK,iBAAL;AACI,aAAOI,YAAY,CAACR,KAAD,EAAQC,MAAR,CAAnB;;AAEJ,SAAK,gBAAL;AACI,aAAO,EACH,GAAGD,KADA;AAEHS,QAAAA,UAAU,EAAER,MAAM,CAACS;AAFhB,OAAP;;AAKJ,SAAK,gBAAL;AACI,aAAM,EACF,GAAGV,KADD;AAEFW,QAAAA,WAAW,EAAEV,MAAM,CAACW,QAFlB;AAGFC,QAAAA,gBAAgB,EAAE;AAHhB,OAAN;;AAMJ;AACI,aAAOb,KAAP;AA/BR;AAiCH,CAnCD;;AAqCA,eAAeD,WAAf,C,CAEA;;AACA,MAAMe,mBAAmB,GAAG,CAACV,KAAD,EAAQW,iBAAR,KAA8B;AAGtD,OAAK,IAAIC,IAAT,IAAiBZ,KAAjB,EAAwB;AACpB,QAAGY,IAAI,CAACd,IAAL,CAAUe,WAAV,OAA4BF,iBAA/B,EACI,OAAO,KAAP;AACP;;AAED,SAAO,IAAP;AACH,CATD,C,CAWA;;;AACA,MAAMP,YAAY,GAAG,CAACR,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAEzC,QAAME,aAAa,GAAGH,KAAK,CAACO,cAA5B;;AAEA,MAAGJ,aAAa,CAACe,MAAd,GAAuB,CAA1B,EAA4B;AAExB,QAAIJ,mBAAmB,CAACX,aAAD,EAAgBF,MAAM,CAACkB,OAAvB,CAAvB,EAAwD;AACpD;AACA,UAAIC,YAAY,GAAG,EAAnB;;AACA,WAAK,IAAIf,YAAT,IAAyBF,aAAzB,EAAwC;AACpCiB,QAAAA,YAAY,CAACd,IAAb,CAAkB;AAAEe,UAAAA,UAAU,EAAE,CAAd;AAAiBC,UAAAA,QAAQ,EAAEjB,YAAY,CAACkB;AAAxC,SAAlB;AACH;;AAED,aAAO,EACH,GAAGvB,KADA;AAEHwB,QAAAA,gBAAgB,EAAE,KAFf;AAGHC,QAAAA,YAAY,EAAE,EAHX;AAIHd,QAAAA,WAAW,EAAES,YAJV;AAKHP,QAAAA,gBAAgB,EAAE;AALf,OAAP;AAQH,KAfD,MAeO;AAEH,aAAO,EACH,GAAGb,KADA;AAEHwB,QAAAA,gBAAgB,EAAE,IAFf;AAGHC,QAAAA,YAAY,EAAE,oCAAkCxB,MAAM,CAACkB,OAHpD;AAIHO,QAAAA,iBAAiB,EAAE,KAJhB;AAKHf,QAAAA,WAAW,EAAE,EALV;AAMHE,QAAAA,gBAAgB,EAAE;AANf,OAAP;AASH;AAEJ,GA9BD,MA8BO;AAEH,WAAO,EACH,GAAGb,KADA;AAEHwB,MAAAA,gBAAgB,EAAE,IAFf;AAGHC,MAAAA,YAAY,EAAE,wCAHX;AAIHC,MAAAA,iBAAiB,EAAE,KAJhB;AAKHf,MAAAA,WAAW,EAAE,EALV;AAMHE,MAAAA,gBAAgB,EAAE;AANf,KAAP;AAQH;AACJ,CA7CD","sourcesContent":["import UploadService from \"../services/fileUpload\";\r\n\r\n//metodo que valida los actions para ejecutar la acción\r\n// correspondiente según la interaccion del usuario con la página\r\nconst uploadImage = (state = {}, action) => {\r\n\r\n    switch (action.type) {\r\n        case 'SELECCCIONAR_ARCHIVOS':\r\n\r\n            let selectedFiles = action.files;\r\n            let files = []\r\n            for (let selectedFile of selectedFiles) {\r\n                files.push(selectedFile);\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                selectedImages: files\r\n            }\r\n            \r\n        case 'CARGAR_ARCHIVOS' :\r\n            return uploadImages(state, action)\r\n            \r\n        case 'LISTA_IMAGENES':\r\n            return {\r\n                ...state,\r\n                imagesList: action.list\r\n            }\r\n\r\n        case 'PROGRESO_CARGA' :\r\n            return{\r\n                ...state,\r\n                progressBar: action.progress,\r\n                procesarImagenes: false\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default uploadImage;\r\n\r\n//metodo que evalua si todos las imagenes seleccionadas son de tipo JPG\r\nconst imageTypeValidation = (files, imageTypeAccepted) => {\r\n\r\n\r\n    for (let file of files) {\r\n        if(file.type.toLowerCase() !== imageTypeAccepted)\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n//método que recorre la lista de imagenes para mostrar la barra del progreso de carga de cada una\r\nconst uploadImages = (state = {}, action) => {\r\n\r\n    const selectedFiles = state.selectedImages\r\n\r\n    if(selectedFiles.length > 0){\r\n\r\n        if( imageTypeValidation(selectedFiles, action.imgType) ){\r\n            // actualizamos limpiando el valor de estado del mensaje de alerta para que se renderice el DOM \r\n            let _progressBar = [];\r\n            for (let selectedFile of selectedFiles) {\r\n                _progressBar.push({ percentage: 0, fileName: selectedFile.name });\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                showAlertMessage: false,\r\n                alertMessage: \"\",\r\n                progressBar: _progressBar,\r\n                procesarImagenes: true\r\n            }\r\n          \r\n        } else {\r\n             \r\n            return {\r\n                ...state,\r\n                showAlertMessage: true,\r\n                alertMessage: \"Solo se permiten imagenes tipo \"+action.imgType,\r\n                showResultMessage: false,\r\n                progressBar: [],\r\n                procesarImagenes: false                   \r\n            }\r\n            \r\n        }\r\n\r\n    } else {\r\n\r\n        return {\r\n            ...state,\r\n            showAlertMessage: true,\r\n            alertMessage: \"No ha seleccionado ningún archivo aún!\",\r\n            showResultMessage: false,\r\n            progressBar: [],\r\n            procesarImagenes: false                           \r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}